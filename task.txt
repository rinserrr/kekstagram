/*
    2.18. Нужно больше функций


    Функция, возвращающая случайное целое число из переданного диапазона включительно.
    Пример использования функции:
    имя_функции(от, до); // Результат: целое число из диапазона "от...до"

    Учтите, что аргументами функции могут быть только положительные числа и ноль.
    Если функции пришли неправильные аргументы, она должна вернуть NaN (о том, что это такое, говорилось в учебнике).

    Придумайте, как функция будет вести себя, если передать значение «до» меньшее, чем значение «от», или равное ему.
    Например, в этом случае функция также может возвращать NaN. Или же вы можете проверить, какой из аргументов больше,
    а какой меньше, и при необходимости поменять их местами. Возможны и другие варианты.

    Функция может не гарантировать верный результат, если в переданном диапазоне нет ни одного подходящего числа.
*/


/*
    4.15. Больше деталей


    В файле main.js на основе написанных по заданию ранее вспомогательных функций напишите необходимые функции для создания массива из 25 сгенерированных объектов. Каждый объект массива — описание фотографии, опубликованной пользователем.

    Структура каждого объекта должна быть следующей:

    id, число — идентификатор опубликованной фотографии. Это число от 1 до 25. Идентификаторы не должны повторяться.

    url, строка — адрес картинки вида photos/{{i}}.jpg, где {{i}} — это число от 1 до 25. Адреса картинок не должны повторяться.

    description, строка — описание фотографии. Описание придумайте самостоятельно.

    likes, число — количество лайков, поставленных фотографии. Случайное число от 15 до 200.

    comments, массив объектов — список комментариев, оставленных другими пользователями к этой фотографии. Количество комментариев к каждой фотографии вы определяете на своё усмотрение. Все комментарии генерируются случайным образом. Пример описания объекта с комментарием:

    {
    id: 135,
    avatar: 'img/avatar-6.svg',
    message: 'В целом всё неплохо. Но не всё.',
    name: 'Артём',
    }

    У каждого комментария есть идентификатор — id — случайное число. Идентификаторы не должны повторяться.

    Поле avatar — это строка, значение которой формируется по правилу img/avatar-{{случайное число от 1 до 6}}.svg. Аватарки подготовлены в директории img.

    Для формирования текста комментария — message — вам необходимо взять одно или два случайных предложения из представленных ниже:

    Всё отлично!
    В целом всё неплохо. Но не всё.
    Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.
    Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.
    Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.
    Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!


    Имена авторов также должны быть случайными. Набор имён для комментаторов составьте сами. Подставляйте случайное имя в поле name.
*/


/*
    5.16. Модуляция


    Задача

    Разделите код, уже написанный в main.js, на отдельные ES2015-модули. main.js станет главным модулем, точкой входа. В этом файле должны остаться только импорты других модулей, а также код, который необходим для их работы.

    Пример разбиения на модули
    main.js — точка входа. Модуль, который связывает другие модули;
    util.js — модуль с вспомогательными функциями;
    data.js — модуль, который создаёт данные.
    Указанное выше разделение на модули — это только пример. Вы можете разделить код на модули так, как считаете нужным.

    Импортируйте нужные модули в точку входа, а точку входа подключите в index.html как скрипт-модуль.

    По желанию, вы можете перечитать техническое задание и подумать, какие ещё модули потребуются в приложении, а после завести под них пустые файлы, чтобы сразу обозначить файловую структуру проекта.
*/


/*
    7.16. Отрисуй меня полностью (часть 1)


    Задача

    Обратите внимание, в тексте задания вы будете встречать текст в фигурных скобках. Такой текст будет означать, что на месте этого текста должно появиться значение, которое вы возьмёте из данных. Например, в шаблоне может быть написано <div>{{x}}</div>, и это будет значить, что {{x}} нужно заменить на значение переменной x. Если переменная будет равна 100, то разметка должна выглядеть как <div>100</div>. Фигурные скобки в этой записи ничего не значат, они просто показывают, что закончилась разметка и в этом месте будут стоять данные. Сами фигурные скобки переносить в разметку не нужно.


    Отобразить фотографии других пользователей.

    1. Заведите модуль, который будет отвечать за отрисовку миниатюр.

    2. На основе временных данных для разработки и шаблона #picture создайте DOM-элементы, соответствующие фотографиям, и заполните их данными:
        Адрес изображения url подставьте как атрибут src изображения.
        Количество лайков likes выведите в блок .picture__likes.
        Количество комментариев comments выведите в блок .picture__comments.

    3.  Отрисуйте сгенерированные DOM-элементы в блок .pictures. Для вставки элементов используйте DocumentFragment.

    4. Подключите модуль в проект.
*/


/*
    7.17. Отрисуй меня полностью (часть 2) — для сложных проектов


    Задача

    Реализовать сценарий просмотра фотографий в полноразмерном режиме. В таком режиме пользователь получает несколько дополнительных возможностей: детально рассмотреть изображение, поставить «лайк», почитать комментарии, оставленные другими пользователями.

    1. Заведите модуль, который будет отвечать за отрисовку окна с полноразмерным изображением.

    2. Для отображения окна нужно удалять класс hidden у элемента .big-picture и каждый раз заполнять его
        данными о конкретной фотографии:

        Адрес изображения url подставьте как src изображения внутри блока .big-picture__img.

        Количество лайков likes подставьте как текстовое содержание элемента .likes-count.

        Количество комментариев comments подставьте как текстовое содержание элемента .comments-count.

        Список комментариев под фотографией: комментарии должны вставляться в блок .social__comments. Разметка каждого комментария должна выглядеть так:
        <li class="social__comment">
            <img
                class="social__picture"
                src="{{аватар}}"
                alt="{{имя комментатора}}"
                width="35" height="35">
            <p class="social__text">{{текст комментария}}</p>
        </li>

        Описание фотографии description вставьте строкой в блок .social__caption.

    3. После открытия окна спрячьте блоки счётчика комментариев .social__comment-count и загрузки новых
       комментариев .comments-loader, добавив им класс hidden, с ними мы разберёмся позже, в другом домашнем задании.

    4. После открытия окна добавьте тегу <body> класс modal-open, чтобы контейнер с фотографиями позади не
       прокручивался при скролле. При закрытии окна не забудьте удалить этот класс.

    5. Напишите код для закрытия окна по нажатию клавиши Esc и клике по иконке закрытия.

    6. Подключите модуль в проект.


    Как связать модули миниатюр и полноразмерного режима?

    Задача не имеет одного верного решения, поэтому будет правильным как использование третьего модуля для связки двух других, так и импорт модуля полноразмерных изображений в модуль миниатюр и дальнейшая работа с интерфейсом этого модуля, addEventListener и замыканиями. Последнее решение похоже на демонстрацию по учебному проекту. А первое — с третьим модулем — более сложное из-за отсутствия примера, но самостоятельное. В качестве третьего модуля можно выбрать точку входа, а можно завести отдельный модуль, например «Галерея». Решение за вами.
*/
